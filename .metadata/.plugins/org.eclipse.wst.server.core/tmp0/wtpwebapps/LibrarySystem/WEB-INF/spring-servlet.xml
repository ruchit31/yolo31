<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/data/jpa
    	http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
  
    <!-- It register the beans in context and scan the annotations inside beans and activate them -->
    <context:component-scan base-package="edu.sjsu.cmpe275.term.controller" />
   
    <!-- This allow for dispatching requests to Controllers -->
    <mvc:annotation-driven />
    
    <mvc:resources mapping="/resources/**" location="/resources/"/>
    
 	<jpa:repositories base-package="edu.sjsu.cmpe275.term.model"/>
    <bean id ="appController" class="edu.sjsu.cmpe275.term.controller.AppController">
    	<property name="bookService" ref="bookService"></property>
    	<property name="librarianService" ref="librarianService"></property>
    	<property name="patronService" ref="patronService"></property>	
    	<property name="bookStatusService" ref="bookStatusService"></property>
   	</bean>
   	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="staticMethod" value="edu.sjsu.cmpe275.term.controller.AppController.setActivationMailSender"/>
	    <property name="arguments">
	        <list>
	            <ref bean="activationMailSender"/>
	        </list>
	   </property>
	</bean>
   	 <bean id ="bookService" class="edu.sjsu.cmpe275.term.service.BookServiceImpl">
    	<property name="bookDAO" ref="bookDAO"></property>	
    </bean>
   	<bean id ="bookStatusService" class="edu.sjsu.cmpe275.term.service.BookStatusServiceImpl">
    	<property name="bookStatusDAO" ref="bookStatusDAO"></property>
    </bean>
    <bean id="librarianService" class="edu.sjsu.cmpe275.term.service.LibrarianServiceImpl">
    	<property name="librarianDAO" ref="librarianDAO"></property>
    </bean>
       <bean id="patronService" class="edu.sjsu.cmpe275.term.service.PatronServiceImpl">
    	<property name="patronDAO" ref="patronDAO"></property>
    </bean>    
    <bean id ="patronDAO" class="edu.sjsu.cmpe275.term.dao.PatronDAOImpl"/>
    <bean id ="bookDAO" class="edu.sjsu.cmpe275.term.dao.BookDAOImpl"/>
    <bean id="librarianDAO" class="edu.sjsu.cmpe275.term.dao.LibrarianDAOImpl"/>
    <bean id="bookStatusDAO" class="edu.sjsu.cmpe275.term.dao.BookStatusDAOImpl"/> 
     <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<!-- one of the properties available; the maximum file size in bytes -->
    	<property name="maxUploadSize" value="900000"/>
	</bean>
    <!-- SET default mail properties -->
    <bean id="activationMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.gmail.com"/>
        
        <property name="username" value="libraryMangementSystem@gmail.com"/>
        <property name="password" value="password04"/>
        <property name="javaMailProperties">
            <props>
                <!-- <prop key="mail.transport.protocol">smtp</prop> -->
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
                <prop key="mail.defaultEncoding">UTF-8</prop>
                <prop key="mail.smtp.starttls.required">true</prop>
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                <prop key="mail.smtp.socketFactory.fallback">false</prop>
                <prop key="mail.smtp.port">465</prop>
                <prop key="mail.smtp.socketFactory.port">465</prop>
            </props>
        </property>
    </bean>
             
    <!-- This helps in mapping the logical view names to directly view files under a certain pre-configured directory -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>
      
    <!-- This resolves messages from resource bundles for different locales -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
            	<value>classpath:messages</value>
            </list>
        </property>
    </bean>
    
    
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	  <property name="location" value="classpath:application.properties" />
	  <property name="ignoreUnresolvablePlaceholders" value="true"/>
	</bean>
    
    <bean id="persistenceUnitManager"
        class="org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager">
        <property name="persistenceXmlLocations">
            <list>
            <value>classpath*:META-INF/persistence.xml</value>
            </list>
        </property>
        <property name="defaultDataSource" ref="dataSource" />
    </bean>
     
    <!-- Configure the entity manager factory bean -->
    <!-- This produces a container-managed EntityManagerFactory; 
         rather than application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean-->
    <bean id="entityManagerFactoryBean" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      <property name="dataSource" ref="dataSource" />
      <!-- This makes /META-INF/persistence.xml is no longer necessary -->
      <property name="packagesToScan" value="edu.sjsu.cmpe275.term.model" />
      <!-- JpaVendorAdapter implementation for Hibernate EntityManager.
           Exposes Hibernate's persistence provider and EntityManager extension interface -->
      <property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>
      <property name="persistenceUnitManager" ref="persistenceUnitManager" />
      <property name="persistenceUnitName" value="${jpa.persistenceUnitName}" />
      <property name="jpaProperties">
         <props>
            <prop key="hibernate.dialect">${hibernate.dialect}</prop>
            <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
            <prop key="hibernate.show_sql">${hibernate.show_sql}</prop> 
            <prop key="hibernate.format_sql">${hibernate.format_sql}</prop> 
            <prop key="hibernate.ejb.naming_strategy">${hibernate.ejb.naming_strategy}</prop> 
         	<prop key="hibernate.enable_lazy_load_no_trans">${hibernate.enable_lazy_load_no_trans}</prop>
         </props>
      </property>
  	</bean>
  
   <!-- Simple implementation of the standard JDBC DataSource interface, 
        configuring the plain old JDBC DriverManager via bean properties -->
   <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      <property name="driverClassName" value="${jdbc.driverClassName}" />
      <property name="url" value="${jdbc.url}" />
      <property name="username" value="${jdbc.username}" />
      <property name="password" value="${jdbc.password}" />
   </bean>
   
   <bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="showSql" value="true"/>
        <property name="generateDdl" value="true"/>
        <property name="database" value="MYSQL"/>
    </bean>
    
    <!-- Configure the transaction manager bean -->
    <!-- This transaction manager is appropriate for applications that use a single JPA EntityManagerFactory for transactional data access. 
        JTA (usually through JtaTransactionManager) is necessary for accessing multiple transactional resources within the same transaction. -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
      <property name="entityManagerFactory" ref="entityManagerFactoryBean" />
   </bean>
   
   <!-- Enable JPA Support -->
	<bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
   
   <!-- Enable annotation driven transaction management -->
   <!-- responsible for registering the necessary Spring components that power annotation-driven transaction management; 
        such as when @Transactional methods are invoked -->
   <tx:annotation-driven />
    
</beans>